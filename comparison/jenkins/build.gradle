buildscript {
    ext { springBootVersion = '1.3.5.RELEASE' }
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "org.xtend:xtend-gradle-plugin:0.4.14"
    }
}

plugins {
    id "de.undercouch.download" version "3.0.0"
}

import de.undercouch.gradle.tasks.download.Download
import de.undercouch.gradle.tasks.download.Verify

// Apply the java plugin to add support for Java
apply plugin: "java"
apply plugin: "groovy"
apply plugin: "eclipse"
apply plugin: 'spring-boot'

sourceCompatibility = 1.8

repositories {
    jcenter()
}

bootRepackage {
    enabled = false
}

dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile("org.springframework.boot:spring-boot-starter-web")
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.14'

    // mandatory dependencies for using Spock
    compile "org.codehaus.groovy:groovy-all:2.4.1"

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
    testCompile('org.skyscreamer:jsonassert')

    testCompile "info.cukes:cucumber-java8:1.2.4"
    testCompile "info.cukes:cucumber-junit:1.2.4"
    testCompile 'com.codeborne:selenide:3.6'
    // optional dependencies for using Spock
    testCompile "org.hamcrest:hamcrest-core:1.3" // only necessary if Hamcrest matchers are used
    testRuntime "cglib:cglib-nodep:3.1"          // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:2.1"    // allows mocking of classes without default constructor (together with CGLIB)

	testCompile 'com.offbytwo.jenkins:jenkins-client:0.3.5'
}

def jenkinsFolder = "$buildDir/jenkins"
def jenkinsHome = "$jenkinsFolder/.jenkins"
def jenkinsPort = "60080"

task downloadJenkins(type: Download) {
    // TODO would be nice to have Jenkins 2, but setup is a bit more complicated
    src 'http://mirrors.jenkins-ci.org/war-stable/1.651.2/jenkins.war'
    dest "$jenkinsFolder/jenkins.war"
    onlyIfNewer true
}

task verifyJenkins(type: Verify, dependsOn: downloadJenkins) {
    src new File(jenkinsFolder, 'jenkins.war')
    algorithm 'SHA-256'
    checksum '1e239db19071beaac3f2db3ec6a568346bbeb9087f5f0fcf19adf6ae62cbcc2b'
}

task setupJenkins(type: Copy, dependsOn: verifyJenkins) {
    from 'jenkinsHome'
    into jenkinsHome
}

clean {
    delete jenkinsHome
}

task startJenkins(type: ExecWait, dependsOn: setupJenkins) {
    command "java -DJENKINS_HOME=$jenkinsHome -jar $jenkinsFolder/jenkins.war --httpPort=$jenkinsPort "
    ready "Jenkins is fully up and running"
    directory "$buildDir"
    doLast {
        logger.lifecycle("Running Jenkins. Login with user: admin password: NotReallyASecret")
    }
}

task stopJenkins << {
    startJenkins.stopProcess()
}

test {
	systemProperty 'JENKINS_PORT', jenkinsPort
}

test.dependsOn startJenkins
test.finalizedBy stopJenkins
